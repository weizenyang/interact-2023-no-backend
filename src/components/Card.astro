---
import type { MarkdownContent } from 'astro';
// import matter from 'gray-matter';
import showdown from 'showdown';
const converter = new showdown.Converter();

// const markdownContent = `# Hello World!`;
// const htmlContent = converter.makeHtml(markdownContent);

export interface Props {
	title?: MarkdownContent;
	body?: string;
	href?: string;
	description?: MarkdownContent;
	event_period?: MarkdownContent;
	contacts?: MarkdownContent;
	website?: string;
	mode?: string;
	keywords? : string;
	time? : string;
	authors?: {
		name? : string;
	};
}
console.log(Astro.props.contacts)
const { href, title, body, mode, event_period, website, type, keywords, time, authors } = Astro.props;
// const title = converter.makeHtml(Astro.props.title)
const description = converter.makeHtml(Astro.props.description)
// const website = converter.makeHtml(Astro.props.website)
const contacts = converter.makeHtml(Astro.props.contacts)
const date_widget = Astro.props.date_widget ?? null;
const dateWidgetPresent = date_widget != null;
// if(date_widget == null){
// 	dateWidgetPresent = false;
// 	console.log(date_widget + " Null Detected")
// 	console.log(dateWidgetPresent)
// } else {
// 	console.log(date_widget.keys)
// 	console.log(dateWidgetPresent)
// }

---

<li class="link-card" 
data-description={description} 
data-contacts={contacts} 
data-title={title} 
data-date={event_period} 
data-website={website} 
data-mode={mode}
data-type={type}
data-authors={authors && authors.map((e) => (e.name + "|"))}
data-keywords={keywords}
data-time={time}>
	<a class="inner-div-gradient" href={href}>
		<div class="title-section">
			<h3 class="card-title" set:html={title}></h3>
			<span>&rarr;</span>
		</div>

		<div class="pill">
			<p>
				{dateWidgetPresent ? date_widget : event_period}
			</p>
		</div>

	</a>
</li>
<style>
	:root {
		--link-gradient: linear-gradient(45deg, #FFC22300, #FFC22322 30%, #FCF7EB11 60%);
		--link-gradient-1: linear-gradient(45deg, #002C38DD, #002C38DD 30%, #002C3844 100%);
	}

	.link-card {
		list-style: none;
		display: flex;
		text-decoration: none;
		padding: 2px;
		background: #ffffff;
		background-image: var(--link-gradient-1);
		background-size: 400%;
		border-radius: 0.5rem;
		background-position: 100%;
		min-height: 160px;
		justify-content: space-between;
		transition: background-position 0.2s cubic-bezier(0.22, 0.5, 0.36, 0.5);
		
	}

	.link-card:hover{
		text-decoration: none !important;
	}

	.inner-div-gradient{
		background-image: var(--link-gradient);
		background-size: 400%;
		border-radius: 0.5rem;
		background-position: 100%;
		transition: background-position 0.2s cubic-bezier(0.22, 0.5, 0.36, 0.5);
		/* align-items: center; */
		justify-content: space-between;
		display: flex;
		flex-direction: column;
		
	}

	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: 0.5em 0.5em;
		border-radius: 0.4rem;
		color: var(--text-color);
		background-image: var(--link-gradient);
		background-color: hsl(10, 21%, 95%);

		/* opacity: 0.9; */
	}

	.pill{
		background-color: #002C38;
		color: #ffffff;
		border-radius: 1em;
		font-size: 0.8em;
		padding: 0.1em 0.6em;
		width: fit-content;
		/* max-width: max-content; */
	}

	h2 {
		margin: 0;
		/* transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1); */
	}

	p {
		margin-top: 0em;
		margin-bottom: 0;
		margin: 0%;
		display: flex;
	}

	h2 span {
		display: inline-block;
		/* transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1); */
	}

	.link-card:is(:hover, :focus-within) {
		/* background-color: #ffffff; */
		/* padding: 0px; */
		background-position: 0;
	}

	.inner-div-gradient:is(:hover, :focus-within){
		background-position:40%;
	}

	.link-card:is(:hover, :focus-within) h2 {
		text-decoration: underline;
	}

	.link-card:is(:hover, :focus-within) h2 span {
		will-change: transform;
		transform: translateX(2px);
	}



	.card-title{
		display: flex;
		justify-content: space-between;
		display: inline-block;
	}

	/* .card-title span{
		padding-left: 1em;
	} */

	.title-section{
		display: flex;
	}

	.inner-div-gradient span{
		display: flex;
		flex-direction: column;
		justify-content: center;
		padding-right: 0.5em;
		justify-items: center;
		transform: translateX(0px);
		transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);
	}

	.inner-div-gradient:hover span{
		padding-right: 0.5em;
		transform: translateX(10px);
	}

	
	@media screen and (max-width:1200px){
		

	}
</style>
